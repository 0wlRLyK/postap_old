# Generated by Django 3.0.5 on 2020-08-08 13:35

import datetime

import ckeditor.fields
import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
import easy_thumbnails.fields
import multiselectfield.db.fields
import stdimage.models
import userena.models
import users.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('equipment', '0001_initial'),
        ('cities_light', '0010_auto_20200508_1851'),
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='SiteUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False,
                                                     help_text='Designates that this user has all permissions without explicitly assigning them.',
                                                     verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'},
                                              help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                                              max_length=150, unique=True,
                                              validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                                              verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False,
                                                 help_text='Designates whether the user can log into this admin site.',
                                                 verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True,
                                                  help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                                                  verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('birthday', models.DateField(default=datetime.date(1990, 1, 6), verbose_name='Birthday')),
                ('gender',
                 models.CharField(choices=[('male', 'Male'), ('female', 'Female')], default='None', max_length=100,
                                  verbose_name='Gender')),
                ('city', models.CharField(blank=True, default=' ', max_length=50, verbose_name='City')),
                ('signature', ckeditor.fields.RichTextField(blank=True, default='', verbose_name='Signature')),
                ('sign_image', models.ImageField(blank=True, null=True, upload_to=users.models.upload_to_sign,
                                                 verbose_name='Signature image')),
                ('rpl_nickname',
                 models.CharField(blank=True, default='Stalker', max_length=50, verbose_name='Nickname of hero')),
                ('rpl_first_name',
                 models.CharField(blank=True, default='', max_length=50, verbose_name='First name of hero')),
                ('rpl_second_name',
                 models.CharField(blank=True, default='', max_length=50, verbose_name='Second name of hero')),
                ('rpl_bio', ckeditor.fields.RichTextField(blank=True, default='', verbose_name='Biography of hero')),
                ('speciality', models.CharField(
                    choices=[('no', 'Without speciality'), ('hunter', 'Hunter'), ('warrior', 'Warrior'),
                             ('stalker', 'Stalker'), ('mechanic', 'Mechanic'), ('doctor', 'Doctor'),
                             ('trader', 'Trader'), ('guide', 'Guide')], default='no', max_length=200,
                    verbose_name='Speciality of hero')),
                ('rpl_xp', models.IntegerField(default=0, verbose_name='Experience of hero')),
                ('rpl_lvl', models.IntegerField(default=0, verbose_name='Level of hero')),
                ('rank', models.IntegerField(default=0, verbose_name='Rank of hero')),
                ('hp', models.PositiveSmallIntegerField(default=100, verbose_name='Health points')),
                ('rad', models.SmallIntegerField(default=0, verbose_name='Radiation points')),
                ('satiety', models.SmallIntegerField(default=20, verbose_name='Satiety points')),
                ('reputation', models.IntegerField(default=0, verbose_name='Reputation')),
                ('money', models.IntegerField(default=0, verbose_name='Money')),
                ('xp', models.IntegerField(default=0, verbose_name='Experience')),
                ('level', models.IntegerField(default=0, verbose_name='Level')),
                ('last_online', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AvatarCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Имя категории')),
            ],
            options={
                'verbose_name': 'Категория аватаров',
                'verbose_name_plural': 'Категории аватаров',
            },
        ),
        migrations.CreateModel(
            name='RplAvatarCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Имя категории')),
            ],
            options={
                'verbose_name': 'Категория аватаров персонажей',
                'verbose_name_plural': 'Категории аватаров персонажей',
            },
        ),
        migrations.CreateModel(
            name='UsersProfiles',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mugshot', easy_thumbnails.fields.ThumbnailerImageField(blank=True,
                                                                         help_text='A personal image displayed in your profile.',
                                                                         upload_to=userena.models.upload_to_mugshot,
                                                                         verbose_name='mugshot')),
                ('privacy',
                 models.CharField(choices=[('open', 'Open'), ('registered', 'Registered'), ('closed', 'Closed')],
                                  default='registered', help_text='Designates who can view your profile.',
                                  max_length=15, verbose_name='privacy')),
                ('slug', models.SlugField(blank=True, editable=False, max_length=300, null=True, unique=True,
                                          verbose_name='Слаг')),
                ('bg', models.ImageField(blank=True, null=True, upload_to=users.models.upload_to_bg,
                                         verbose_name='Signature image')),
                ('quote', models.CharField(blank=True, default='', max_length=100, verbose_name='Status')),
                ('permissions', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('faction', 'Faction'),
                                                                                                 ('speciality',
                                                                                                  'Faction'), (
                                                                                                 'first_visit',
                                                                                                 'First visit'), (
                                                                                                 'last_visit',
                                                                                                 'Last visit'), (
                                                                                                 'birthday',
                                                                                                 'Birthday'),
                                                                                                 ('gender', 'Gender'), (
                                                                                                 'reputation',
                                                                                                 'Reputation'),
                                                                                                 ('money', 'Money'),
                                                                                                 ('xp', 'Experience'),
                                                                                                 ('lvl', 'Level'),
                                                                                                 ('rank', 'Rank')],
                                                                            max_length=200, null=True,
                                                                            verbose_name='права')),
                ('user',
                 models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='users_profiles',
                                      to=settings.AUTH_USER_MODEL, verbose_name='пользователь')),
            ],
            options={
                'verbose_name': 'Профиль пользователя',
                'verbose_name_plural': 'Профили пользователей',
            },
        ),
        migrations.CreateModel(
            name='RplAvatar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название аватара')),
                ('image', models.ImageField(blank=True, upload_to='avatars/base', verbose_name='Аватар')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                               to='users.RplAvatarCategory')),
            ],
            options={
                'verbose_name': 'Аватар персонажа',
                'verbose_name_plural': 'Аватары персонажей',
            },
        ),
        migrations.CreateModel(
            name='ReputationTransaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.IntegerField(verbose_name='Сумма')),
                ('comment', ckeditor.fields.RichTextField(max_length=250)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='rep_to',
                                                to=settings.AUTH_USER_MODEL, verbose_name='Получатель')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='rep_from',
                                             to=settings.AUTH_USER_MODEL, verbose_name='Отправитель')),
            ],
            options={
                'verbose_name': 'Репутационная транзакции',
                'verbose_name_plural': 'Репутационные транзакции',
            },
        ),
        migrations.CreateModel(
            name='MoneyTransaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.IntegerField(verbose_name='Сумма')),
                ('comment', ckeditor.fields.RichTextField(max_length=250)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='money_to',
                                                to=settings.AUTH_USER_MODEL, verbose_name='Получатель')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='money_from',
                                             to=settings.AUTH_USER_MODEL, verbose_name='Отправитель')),
            ],
            options={
                'verbose_name': 'Денежная транзакции',
                'verbose_name_plural': 'Денежные транзакции',
            },
        ),
        migrations.CreateModel(
            name='Faction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Имя категории')),
                ('description', ckeditor.fields.RichTextField(verbose_name='Описание группировки')),
                ('logo', stdimage.models.StdImageField(blank=True, default='postap.png', upload_to='users/factions',
                                                       verbose_name='Лого')),
                ('image', stdimage.models.StdImageField(blank=True, default='postap.png', upload_to='users/factions',
                                                        verbose_name='Изображение')),
                ('armourer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                               related_name='gr_armourer', to=settings.AUTH_USER_MODEL,
                                               verbose_name='Оружейник')),
                ('armourer_assistant',
                 models.ManyToManyField(blank=True, related_name='gr_armourer_help', to=settings.AUTH_USER_MODEL,
                                        verbose_name='Помощники оружейника')),
                ('assault_commander',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                   related_name='gr_assault_com', to=settings.AUTH_USER_MODEL,
                                   verbose_name='Командир штурмовиков')),
                ('assaults', models.ManyToManyField(blank=True, related_name='gr_assaults', to=settings.AUTH_USER_MODEL,
                                                    verbose_name='Штурмовики')),
                ('barmen', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                             related_name='gr_barmen', to=settings.AUTH_USER_MODEL,
                                             verbose_name='Бармен')),
                ('barmen_assistant',
                 models.ManyToManyField(blank=True, related_name='gr_barmen_com', to=settings.AUTH_USER_MODEL,
                                        verbose_name='Помощиники бармена')),
                ('deputy', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                             related_name='gr_deputy', to=settings.AUTH_USER_MODEL,
                                             verbose_name='Заместитель')),
                ('guide', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                            related_name='gr_guide', to=settings.AUTH_USER_MODEL,
                                            verbose_name='Проводник')),
                ('headhunter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                                 related_name='gr_headhunter', to=settings.AUTH_USER_MODEL,
                                                 verbose_name='Главный по найму')),
                ('hunter_commander',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                   related_name='gr_hunter_com', to=settings.AUTH_USER_MODEL,
                                   verbose_name='Командир охотников')),
                ('hunters', models.ManyToManyField(blank=True, related_name='gr_hunters', to=settings.AUTH_USER_MODEL,
                                                   verbose_name='Охотники')),
                ('leader', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                             related_name='gr_leader', to=settings.AUTH_USER_MODEL,
                                             verbose_name='Лидер')),
                ('legends', models.ManyToManyField(blank=True, related_name='gr_legends', to=settings.AUTH_USER_MODEL,
                                                   verbose_name='Легендарные участники группировки')),
                ('mechanic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                               related_name='gr_mechanic', to=settings.AUTH_USER_MODEL,
                                               verbose_name='Механик')),
                ('mechanic_assistant',
                 models.ManyToManyField(blank=True, related_name='gr_mechanic_help', to=settings.AUTH_USER_MODEL,
                                        verbose_name='Помощники механика')),
                ('medic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                            related_name='gr_medic', to=settings.AUTH_USER_MODEL,
                                            verbose_name='Медик')),
                ('medic_assistant',
                 models.ManyToManyField(blank=True, related_name='gr_medic_help', to=settings.AUTH_USER_MODEL,
                                        verbose_name='Помощники медика')),
                ('rel_enemies',
                 models.ManyToManyField(blank=True, related_name='_faction_rel_enemies_+', to='users.Faction',
                                        verbose_name='Враждебные')),
                ('rel_friends',
                 models.ManyToManyField(blank=True, related_name='_faction_rel_friends_+', to='users.Faction',
                                        verbose_name='Союзные группировки')),
                ('rel_neutrals',
                 models.ManyToManyField(blank=True, related_name='_faction_rel_neutrals_+', to='users.Faction',
                                        verbose_name='Нейтальные группировки')),
                ('scientist', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                                related_name='gr_scientist', to=settings.AUTH_USER_MODEL,
                                                verbose_name='Ученый')),
                ('scientist_assistant',
                 models.ManyToManyField(blank=True, related_name='gr_scientist_com', to=settings.AUTH_USER_MODEL,
                                        verbose_name='Помощники ученого')),
                ('security', models.ManyToManyField(blank=True, related_name='gr_security', to=settings.AUTH_USER_MODEL,
                                                    verbose_name='Служба охраны')),
                ('security_commander',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                   related_name='gr_security_com', to=settings.AUTH_USER_MODEL,
                                   verbose_name='Командир охраны')),
                ('sniper_commander',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                   related_name='gr_sniper_com', to=settings.AUTH_USER_MODEL,
                                   verbose_name='Командир снайперов')),
                ('snipers', models.ManyToManyField(blank=True, related_name='gr_snipers', to=settings.AUTH_USER_MODEL,
                                                   verbose_name='Снайперы')),
                ('trader', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                             related_name='gr_trader', to=settings.AUTH_USER_MODEL,
                                             verbose_name='Торговец')),
                ('trader_assistant',
                 models.ManyToManyField(blank=True, related_name='gr_trader_help', to=settings.AUTH_USER_MODEL,
                                        verbose_name='Помощники торговца')),
            ],
            options={
                'verbose_name': 'Группировка',
                'verbose_name_plural': 'Группировки',
            },
        ),
        migrations.CreateModel(
            name='Avatar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название аватара')),
                ('image', models.ImageField(blank=True, upload_to='avatars/base', verbose_name='Аватар')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                               to='users.AvatarCategory')),
            ],
            options={
                'verbose_name': 'Аватар',
                'verbose_name_plural': 'Аватары',
            },
        ),
        migrations.AddField(
            model_name='siteuser',
            name='avatar',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                    to='users.Avatar'),
        ),
        migrations.AddField(
            model_name='siteuser',
            name='country',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                    to='cities_light.Country'),
        ),
        migrations.AddField(
            model_name='siteuser',
            name='equipment',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                    to='equipment.Equip'),
        ),
        migrations.AddField(
            model_name='siteuser',
            name='groups',
            field=models.ManyToManyField(blank=True,
                                         help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                                         related_name='user_set', related_query_name='user', to='auth.Group',
                                         verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='siteuser',
            name='rpl_avatar',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    to='users.RplAvatar', verbose_name='avatar'),
        ),
        migrations.AddField(
            model_name='siteuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.',
                                         related_name='user_set', related_query_name='user', to='auth.Permission',
                                         verbose_name='user permissions'),
        ),
    ]
