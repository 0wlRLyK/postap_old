# Generated by Django 3.0.5 on 2020-05-17 22:26

import ckeditor.fields
import django.db.models.deletion
import image_cropping.fields
import stdimage.models
import users.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('cities_light', '0009_add_subregion'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Avatar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название аватара')),
                ('image',
                 image_cropping.fields.ImageCropField(blank=True, upload_to='avatars/base', verbose_name='Аватар')),
                ('cropping',
                 image_cropping.fields.ImageRatioField('avatar', '80x80', adapt_rotation=False, allow_fullsize=False,
                                                       free_crop=False, help_text=None, hide_image_field=False,
                                                       size_warning=False, verbose_name='cropping')),
            ],
        ),
        migrations.CreateModel(
            name='AvatarCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Имя категории')),
            ],
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Faction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Имя категории')),
                ('description', ckeditor.fields.RichTextField(verbose_name='Описание группировки')),
                ('logo', stdimage.models.StdImageField(blank=True, default='postap.png', upload_to='users/factions',
                                                       verbose_name='Изображение')),
                ('image', stdimage.models.StdImageField(blank=True, default='postap.png', upload_to='users/factions',
                                                        verbose_name='Изображение')),
                ('armourer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                               related_name='gr_armourer', to=settings.AUTH_USER_MODEL,
                                               verbose_name='Оружейник')),
                ('armourer_assistant',
                 models.ManyToManyField(blank=True, related_name='gr_armourer_help', to=settings.AUTH_USER_MODEL,
                                        verbose_name='Помощники оружейника')),
                ('assault_commander',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                   related_name='gr_assault_com', to=settings.AUTH_USER_MODEL,
                                   verbose_name='Командир штурмовиков')),
                ('assaults', models.ManyToManyField(blank=True, related_name='gr_assaults', to=settings.AUTH_USER_MODEL,
                                                    verbose_name='Штурмовики')),
                ('barmen', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                             related_name='gr_barmen', to=settings.AUTH_USER_MODEL,
                                             verbose_name='Бармен')),
                ('barmen_assistant',
                 models.ManyToManyField(blank=True, related_name='gr_barmen_com', to=settings.AUTH_USER_MODEL,
                                        verbose_name='Помощиники бармена')),
                ('deputy', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                             related_name='gr_deputy', to=settings.AUTH_USER_MODEL,
                                             verbose_name='Заместитель')),
                ('guide', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                            related_name='gr_guide', to=settings.AUTH_USER_MODEL,
                                            verbose_name='Проводник')),
                ('headhunter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                                 related_name='gr_headhunter', to=settings.AUTH_USER_MODEL,
                                                 verbose_name='Главный по найму')),
                ('hunter_commander',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                   related_name='gr_hunter_com', to=settings.AUTH_USER_MODEL,
                                   verbose_name='Командир охотников')),
                ('hunters', models.ManyToManyField(blank=True, related_name='gr_hunters', to=settings.AUTH_USER_MODEL,
                                                   verbose_name='Охотники')),
                ('leader', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                             related_name='gr_leader', to=settings.AUTH_USER_MODEL,
                                             verbose_name='Лидер')),
                ('legends', models.ManyToManyField(blank=True, related_name='gr_legends', to=settings.AUTH_USER_MODEL,
                                                   verbose_name='Легендарные участники группировки')),
                ('mechanic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                               related_name='gr_mechanic', to=settings.AUTH_USER_MODEL,
                                               verbose_name='Механик')),
                ('mechanic_assistant',
                 models.ManyToManyField(blank=True, related_name='gr_mechanic_help', to=settings.AUTH_USER_MODEL,
                                        verbose_name='Помощники механика')),
                ('medic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                            related_name='gr_medic', to=settings.AUTH_USER_MODEL,
                                            verbose_name='Медик')),
                ('medic_assistant',
                 models.ManyToManyField(blank=True, related_name='gr_medic_help', to=settings.AUTH_USER_MODEL,
                                        verbose_name='Помощники медика')),
                ('rel_enemies',
                 models.ManyToManyField(blank=True, related_name='_faction_rel_enemies_+', to='users.Faction',
                                        verbose_name='Враждебные')),
                ('rel_friends',
                 models.ManyToManyField(blank=True, related_name='_faction_rel_friends_+', to='users.Faction',
                                        verbose_name='Союзные группировки')),
                ('rel_neutrals',
                 models.ManyToManyField(blank=True, related_name='_faction_rel_neutrals_+', to='users.Faction',
                                        verbose_name='Нейтальные группировки')),
                ('scientist', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                                related_name='gr_scientist', to=settings.AUTH_USER_MODEL,
                                                verbose_name='Ученый')),
                ('scientist_assistant',
                 models.ManyToManyField(blank=True, related_name='gr_scientist_com', to=settings.AUTH_USER_MODEL,
                                        verbose_name='Помощники ученого')),
                ('security', models.ManyToManyField(blank=True, related_name='gr_security', to=settings.AUTH_USER_MODEL,
                                                    verbose_name='Служба охраны')),
                ('security_commander',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                   related_name='gr_security_com', to=settings.AUTH_USER_MODEL,
                                   verbose_name='Командир охраны')),
                ('sniper_commander',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                   related_name='gr_sniper_com', to=settings.AUTH_USER_MODEL,
                                   verbose_name='Командир снайперов')),
                ('snipers', models.ManyToManyField(blank=True, related_name='gr_snipers', to=settings.AUTH_USER_MODEL,
                                                   verbose_name='Снайперы')),
                ('trader', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                             related_name='gr_trader', to=settings.AUTH_USER_MODEL,
                                             verbose_name='Торговец')),
                ('trader_assistant',
                 models.ManyToManyField(blank=True, related_name='gr_trader_help', to=settings.AUTH_USER_MODEL,
                                        verbose_name='Помощники торговца')),
            ],
        ),
        migrations.CreateModel(
            name='RplAvatar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название аватара')),
                ('image',
                 image_cropping.fields.ImageCropField(blank=True, upload_to='avatars/base', verbose_name='Аватар')),
                ('cropping',
                 image_cropping.fields.ImageRatioField('avatar', '80x80', adapt_rotation=False, allow_fullsize=False,
                                                       free_crop=False, help_text=None, hide_image_field=False,
                                                       size_warning=False, verbose_name='cropping')),
            ],
        ),
        migrations.CreateModel(
            name='RplAvatarCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Имя категории')),
            ],
        ),
        migrations.CreateModel(
            name='UsersProfiles',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('privacy',
                 models.CharField(choices=[('open', 'Open'), ('registered', 'Registered'), ('closed', 'Closed')],
                                  default='registered', help_text='Designates who can view your profile.',
                                  max_length=15, verbose_name='privacy')),
                ('mugshot', image_cropping.fields.ImageCropField(blank=True, upload_to=users.models.upload_to_mugshot,
                                                                 verbose_name='avatar')),
                ('cropping',
                 image_cropping.fields.ImageRatioField('avatar', '80x80', adapt_rotation=False, allow_fullsize=False,
                                                       free_crop=False, help_text=None, hide_image_field=False,
                                                       size_warning=False, verbose_name='cropping')),
                ('gender',
                 models.CharField(choices=[('male', 'Male'), ('female', 'Female')], default='None', max_length=100,
                                  verbose_name='пол')),
                ('signature', ckeditor.fields.RichTextField(verbose_name='signature')),
                ('sign_image',
                 image_cropping.fields.ImageCropField(blank=True, upload_to=users.models.upload_to_mugshot,
                                                      verbose_name='avatar')),
                ('sign_image_crop',
                 image_cropping.fields.ImageRatioField('avatar', '600x200', adapt_rotation=False, allow_fullsize=False,
                                                       free_crop=False, help_text=None, hide_image_field=False,
                                                       size_warning=False, verbose_name='cropping')),
                ('rpl_first_name', models.CharField(max_length=50, verbose_name='favourite snack')),
                ('rpl_second_name', models.CharField(max_length=50, verbose_name='favourite snack')),
                ('rpl_bio', ckeditor.fields.RichTextField(verbose_name='biography')),
                ('reputation', models.IntegerField(default=0, verbose_name='reputation')),
                ('money', models.IntegerField(default=0, verbose_name='reputation')),
                ('birthday_dayofyear_internal',
                 models.PositiveSmallIntegerField(default=None, editable=False, null=True)),
                ('avatar', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                             to='users.Avatar')),
                ('city', models.OneToOneField(blank=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                              to='cities_light.City')),
                ('country', models.OneToOneField(blank=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                                 to='cities_light.Country')),
                ('equipment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                                to='users.Equipment')),
                ('faction',
                 models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='users.Faction',
                                   verbose_name='пользователь')),
                ('rpl_avatar', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.RplAvatar',
                                                 verbose_name='avatar')),
                ('user',
                 models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='users_profiles',
                                      to=settings.AUTH_USER_MODEL, verbose_name='пользователь')),
            ],
            options={
                'permissions': (('view_profile', 'Can view profile'),),
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete'),
            },
        ),
        migrations.AddField(
            model_name='rplavatar',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                    to='users.RplAvatarCategory'),
        ),
        migrations.AddField(
            model_name='avatar',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                    to='users.AvatarCategory'),
        ),
    ]
