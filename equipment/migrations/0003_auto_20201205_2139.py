# Generated by Django 3.0.5 on 2020-12-05 19:39

import ckeditor.fields
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('equipment', '0002_auto_20201205_2129'),
    ]

    operations = [
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
                ('icon', models.ImageField(upload_to='', verbose_name='Иконка')),
                ('description', ckeditor.fields.RichTextField(verbose_name='Описание')),
                ('cost', models.PositiveIntegerField(default=0, verbose_name='Стоимость')),
                ('mass', models.PositiveIntegerField(default=0, verbose_name='Масса')),
            ],
        ),
        migrations.CreateModel(
            name='Addon',
            fields=[
                ('item_ptr',
                 models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                      primary_key=True, serialize=False, to='equipment.Item')),
                ('accuracy', models.IntegerField(default=0, verbose_name='Точность')),
                ('damage', models.IntegerField(default=0, verbose_name='Повреждение')),
                ('convenience', models.IntegerField(default=0, verbose_name='Удобность')),
                ('pace_of_fire', models.IntegerField(default=0, verbose_name='Скорострельность')),
                ('capacity', models.IntegerField(default=0, verbose_name='Ёмкость')),
            ],
            options={
                'verbose_name': 'Аддон',
                'verbose_name_plural': 'Аддоны',
            },
            bases=('equipment.item', models.Model),
        ),
        migrations.CreateModel(
            name='Ammo',
            fields=[
                ('item_ptr',
                 models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                      primary_key=True, serialize=False, to='equipment.Item')),
                ('quantity', models.PositiveIntegerField(default=0, verbose_name='Колличество патронов в пачке')),
            ],
            options={
                'verbose_name': 'Пачка патронов',
                'verbose_name_plural': 'Патроны',
            },
            bases=('equipment.item', models.Model),
        ),
        migrations.CreateModel(
            name='Artifact',
            fields=[
                ('item_ptr',
                 models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                      primary_key=True, serialize=False, to='equipment.Item')),
                ('ballistic', models.IntegerField(default=0, verbose_name='Балистическая защита')),
                ('burst', models.IntegerField(default=0, verbose_name='Защита от разрыва')),
                ('kick', models.IntegerField(default=0, verbose_name='Гашение удара')),
                ('explosion', models.IntegerField(default=0, verbose_name='Защита от взрыва')),
                ('thermal', models.IntegerField(default=0, verbose_name='Термозащита')),
                ('chemical', models.IntegerField(default=0, verbose_name='Химащита')),
                ('electrical', models.IntegerField(default=0, verbose_name='Электрозащита')),
                ('radioactive', models.IntegerField(default=0, verbose_name='Радиозащита')),
                ('psi', models.IntegerField(default=0, verbose_name='Пси защита')),
                ('weight', models.IntegerField(default=0, verbose_name='Переносимый вес')),
                ('healing', models.IntegerField(default=0, verbose_name='Лечение')),
                ('satiety', models.IntegerField(default=0, verbose_name='Насыщение')),
                ('energy', models.IntegerField(default=0, verbose_name='Восстановление энергии')),
            ],
            options={
                'verbose_name': 'Артефакт',
                'verbose_name_plural': 'Артефакты',
            },
            bases=('equipment.item', models.Model),
        ),
        migrations.CreateModel(
            name='Backpack',
            fields=[
                ('item_ptr',
                 models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                      primary_key=True, serialize=False, to='equipment.Item')),
                ('carry_weight', models.IntegerField(default=0, verbose_name='Максимальный переносимый вес')),
            ],
            options={
                'verbose_name': 'Рюкзак',
                'verbose_name_plural': 'Рюкзаки',
            },
            bases=('equipment.item', models.Model),
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('item_ptr',
                 models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                      primary_key=True, serialize=False, to='equipment.Item')),
                ('slot_setting', models.BooleanField(verbose_name='Возможность установить в слот устройств')),
                ('actions', models.CharField(choices=[('use', 'Использовать'), ('play', 'Играть')], max_length=10,
                                             verbose_name='Действия для использования')),
            ],
            options={
                'verbose_name': 'Устройство',
                'verbose_name_plural': 'Устройства',
            },
            bases=('equipment.item', models.Model),
        ),
        migrations.CreateModel(
            name='FoodAndMedical',
            fields=[
                ('item_ptr',
                 models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                      primary_key=True, serialize=False, to='equipment.Item')),
                ('ballistic', models.IntegerField(default=0, verbose_name='Балистическая защита')),
                ('burst', models.IntegerField(default=0, verbose_name='Защита от разрыва')),
                ('kick', models.IntegerField(default=0, verbose_name='Гашение удара')),
                ('explosion', models.IntegerField(default=0, verbose_name='Защита от взрыва')),
                ('thermal', models.IntegerField(default=0, verbose_name='Термозащита')),
                ('chemical', models.IntegerField(default=0, verbose_name='Химащита')),
                ('electrical', models.IntegerField(default=0, verbose_name='Электрозащита')),
                ('radioactive', models.IntegerField(default=0, verbose_name='Радиозащита')),
                ('psi', models.IntegerField(default=0, verbose_name='Пси защита')),
                ('weight', models.IntegerField(default=0, verbose_name='Переносимый вес')),
                ('healing', models.IntegerField(default=0, verbose_name='Лечение')),
                ('satiety', models.IntegerField(default=0, verbose_name='Насыщение')),
                ('energy', models.IntegerField(default=0, verbose_name='Восстановление энергии')),
                ('actions', models.CharField(choices=[('use', 'Использовать'), ('eat', 'Съесть'), ('drink', 'Выпить')],
                                             max_length=10, verbose_name='Действия для использования')),
            ],
            options={
                'verbose_name': 'Пищу и медикаменты',
                'verbose_name_plural': 'Пища и медикаменты',
            },
            bases=('equipment.item', models.Model),
        ),
        migrations.CreateModel(
            name='Helmet',
            fields=[
                ('item_ptr',
                 models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                      primary_key=True, serialize=False, to='equipment.Item')),
                ('sort', models.CharField(
                    choices=[('none', '/* NONE /*'), ('headdress', 'Головные уборы'), ('light', 'Легкие шлемы'),
                             ('middle', 'Средние шлемы'), ('heavy', 'Тяжелые шлемы'), ('science', 'Научные шлемы'),
                             ('exo', 'Шлемы экзо')], max_length=100, verbose_name='Тип оружия')),
                ('ballistic', models.IntegerField(default=0, verbose_name='Балистическая защита уникального шлема')),
                ('burst', models.IntegerField(default=0, verbose_name='Защита от разрыва уникального шлема')),
                ('kick', models.IntegerField(default=0, verbose_name='Гашение удара уникального шлема')),
                ('explosion', models.IntegerField(default=0, verbose_name='Защита от взрыва уникального шлема')),
                ('thermal', models.IntegerField(default=0, verbose_name='Термозащита уникального шлема')),
                ('chemical', models.IntegerField(default=0, verbose_name='Химащита уникального шлема')),
                ('electrical', models.IntegerField(default=0, verbose_name='Электрозащита уникального шлема')),
                ('radioactive', models.IntegerField(default=0, verbose_name='Радиоактивная уникального шлема')),
                ('psi', models.IntegerField(default=0, verbose_name='Пси защита уникального шлема')),
                ('weight', models.IntegerField(default=0, verbose_name='Переносимый вес уникального шлема')),
                ('unique', models.BooleanField(default=False, verbose_name='Уникальный шлем')),
            ],
            options={
                'verbose_name': 'Шлем',
                'verbose_name_plural': 'Шлемы',
            },
            bases=('equipment.item', models.Model),
        ),
        migrations.CreateModel(
            name='HelmetUpgrade',
            fields=[
                ('item_ptr',
                 models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                      primary_key=True, serialize=False, to='equipment.Item')),
                ('sort', models.CharField(
                    choices=[('none', '/* NONE /*'), ('headdress', 'Головные уборы'), ('light', 'Легкие шлемы'),
                             ('middle', 'Средние шлемы'), ('heavy', 'Тяжелые шлемы'), ('science', 'Научные шлемы'),
                             ('exo', 'Шлемы экзо')], max_length=100, verbose_name='Тип оружия')),
                ('ballistic', models.IntegerField(default=0, verbose_name='Балистическая защита уникального шлема')),
                ('burst', models.IntegerField(default=0, verbose_name='Защита от разрыва уникального шлема')),
                ('kick', models.IntegerField(default=0, verbose_name='Гашение удара уникального шлема')),
                ('explosion', models.IntegerField(default=0, verbose_name='Защита от взрыва уникального шлема')),
                ('thermal', models.IntegerField(default=0, verbose_name='Термозащита уникального шлема')),
                ('chemical', models.IntegerField(default=0, verbose_name='Химащита уникального шлема')),
                ('electrical', models.IntegerField(default=0, verbose_name='Электрозащита уникального шлема')),
                ('radioactive', models.IntegerField(default=0, verbose_name='Радиоактивная уникального шлема')),
                ('psi', models.IntegerField(default=0, verbose_name='Пси защита уникального шлема')),
                ('weight', models.IntegerField(default=0, verbose_name='Переносимый вес уникального шлема')),
            ],
            options={
                'verbose_name': 'Улучшение шлемов',
                'verbose_name_plural': 'Улучшения шлемов',
            },
            bases=('equipment.item',),
        ),
        migrations.CreateModel(
            name='Misc',
            fields=[
                ('item_ptr',
                 models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                      primary_key=True, serialize=False, to='equipment.Item')),
            ],
            options={
                'verbose_name': 'Разное',
                'verbose_name_plural': 'Разное',
            },
            bases=('equipment.item', models.Model),
        ),
        migrations.CreateModel(
            name='Outfit',
            fields=[
                ('item_ptr',
                 models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                      primary_key=True, serialize=False, to='equipment.Item')),
                ('sort', models.CharField(
                    choices=[('none', '/* NONE /*'), ('rookie', 'Одежда новичка'), ('cloak', 'Плащи'),
                             ('light', 'Легкая броня'), ('middle', 'Средняя броня'),
                             ('rhbz', 'Комбинезоны РХБЗ (радиоационной, химической и биологической защиты)'),
                             ('science_low', 'Научные комбинезоны(Низкий уровень)'),
                             ('science_high', 'Научные комбинезоны(Высокий уровень)'), ('seva', 'СЕВА'),
                             ('heavy', 'Тяжелая броня'), ('protoexo', 'Прототипы экзоскелета'), ('exo', 'Экзоскелеты'),
                             ('heavyexo', 'Тяжелые экзоскелеты')], max_length=100, verbose_name='Тип брони')),
                ('ballistic', models.IntegerField(default=0, verbose_name='Балистическая защита уникального костюма')),
                ('burst', models.IntegerField(default=0, verbose_name='Защита от разрыва уникального костюма')),
                ('kick', models.IntegerField(default=0, verbose_name='Гашение удара уникального костюма')),
                ('explosion', models.IntegerField(default=0, verbose_name='Защита от взрыва уникального костюма')),
                ('thermal', models.IntegerField(default=0, verbose_name='Термозащита уникального костюма')),
                ('chemical', models.IntegerField(default=0, verbose_name='Химащита уникального костюма')),
                ('electrical', models.IntegerField(default=0, verbose_name='Электрозащита уникального костюма')),
                ('radioactive', models.IntegerField(default=0, verbose_name='Радиоактивная уникального костюма')),
                ('psi', models.IntegerField(default=0, verbose_name='Пси защита уникального костюма')),
                ('weight', models.IntegerField(default=0, verbose_name='Переносимый вес уникального костюма')),
                ('arts_max', models.IntegerField(default=0, verbose_name='Колличество контейнеров для артефактов')),
                ('modules_max', models.IntegerField(default=0, verbose_name='Колличество контейнеров для модулей')),
                ('running', models.BooleanField(default=True, verbose_name='Возможность бега')),
                ('helmet_built_in',
                 models.BooleanField(default=False, help_text='Присуствует ли всторенный шлем', verbose_name='Шлем')),
                ('unique', models.BooleanField(default=False, verbose_name='Уникальный костюм')),
            ],
            options={
                'verbose_name': 'Броня',
                'verbose_name_plural': 'Броня',
            },
            bases=('equipment.item', models.Model),
        ),
        migrations.CreateModel(
            name='OutfitUpgrade',
            fields=[
                ('item_ptr',
                 models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                      primary_key=True, serialize=False, to='equipment.Item')),
                ('sort', models.CharField(
                    choices=[('none', '/* NONE /*'), ('rookie', 'Одежда новичка'), ('cloak', 'Плащи'),
                             ('light', 'Легкая броня'), ('middle', 'Средняя броня'),
                             ('rhbz', 'Комбинезоны РХБЗ (радиоационной, химической и биологической защиты)'),
                             ('science_low', 'Научные комбинезоны(Низкий уровень)'),
                             ('science_high', 'Научные комбинезоны(Высокий уровень)'), ('seva', 'СЕВА'),
                             ('heavy', 'Тяжелая броня'), ('protoexo', 'Прототипы экзоскелета'), ('exo', 'Экзоскелеты'),
                             ('heavyexo', 'Тяжелые экзоскелеты')], max_length=100, verbose_name='Тип брони')),
                ('ballistic', models.IntegerField(default=0, verbose_name='Балистическая защита уникального костюма')),
                ('burst', models.IntegerField(default=0, verbose_name='Защита от разрыва уникального костюма')),
                ('kick', models.IntegerField(default=0, verbose_name='Гашение удара уникального костюма')),
                ('explosion', models.IntegerField(default=0, verbose_name='Защита от взрыва уникального костюма')),
                ('thermal', models.IntegerField(default=0, verbose_name='Термозащита уникального костюма')),
                ('chemical', models.IntegerField(default=0, verbose_name='Химащита уникального костюма')),
                ('electrical', models.IntegerField(default=0, verbose_name='Электрозащита уникального костюма')),
                ('radioactive', models.IntegerField(default=0, verbose_name='Радиоактивная уникального костюма')),
                ('psi', models.IntegerField(default=0, verbose_name='Пси защита уникального костюма')),
                ('weight', models.IntegerField(default=0, verbose_name='Переносимый вес уникального костюма')),
                ('arts_max', models.IntegerField(default=0, verbose_name='Колличество контейнеров для артефактов')),
                ('modules_max', models.IntegerField(default=0, verbose_name='Колличество контейнеров для модулей')),
                ('running', models.BooleanField(default=True, verbose_name='Возможность бега')),
            ],
            options={
                'verbose_name': 'Улучшение брони',
                'verbose_name_plural': 'Улучшения брони',
            },
            bases=('equipment.item',),
        ),
        migrations.CreateModel(
            name='QuestItem',
            fields=[
                ('item_ptr',
                 models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                      primary_key=True, serialize=False, to='equipment.Item')),
                ('tradable', models.BooleanField(default=False, help_text='Возможность продать/выкинуть предмет',
                                                 verbose_name='Продаваемость')),
                (
                'feature1', models.CharField(choices=[('none', '')], max_length=100, verbose_name='Характеристика №1')),
                ('feature_num1', models.IntegerField(default=0, verbose_name='Значение характеристики №1')),
                (
                'feature2', models.CharField(choices=[('none', '')], max_length=100, verbose_name='Характеристика №2')),
                ('feature_num2', models.IntegerField(default=0, verbose_name='Значение характеристики №2')),
                (
                'feature3', models.CharField(choices=[('none', '')], max_length=100, verbose_name='Характеристика №3')),
                ('feature_num3', models.IntegerField(default=0, verbose_name='Значение характеристики №3')),
                (
                'feature4', models.CharField(choices=[('none', '')], max_length=100, verbose_name='Характеристика №4')),
                ('feature_num4', models.IntegerField(default=0, verbose_name='Значение характеристики №4')),
                (
                'feature5', models.CharField(choices=[('none', '')], max_length=100, verbose_name='Характеристика №5')),
                ('feature_num5', models.IntegerField(default=0, verbose_name='Значение характеристики №5')),
            ],
            options={
                'verbose_name': 'Квестовый предмет',
                'verbose_name_plural': 'Квестовые предметы',
            },
            bases=('equipment.item', models.Model),
        ),
        migrations.CreateModel(
            name='WeaponUpgrade',
            fields=[
                ('item_ptr',
                 models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                      primary_key=True, serialize=False, to='equipment.Item')),
                ('sort', models.CharField(
                    choices=[('none', '/* NONE /*'), ('melee', 'Ножи/Топоры'), ('pistols', 'Пистолет'),
                             ('smg', 'Пистолеты-пулеметы'), ('shotguns', 'Дробовики'),
                             ('auto_rifles', 'Автоматические винтовки'), ('sniper_rifles', 'Снайперские винтовки'),
                             ('explosive', 'Гранатометы'), ('gauss', 'Винтовка Гаусса')], max_length=100,
                    verbose_name='Тип оружия')),
                ('accuracy', models.IntegerField(default=0, verbose_name='Точность оружия')),
                ('damage', models.IntegerField(default=0, verbose_name='Повреждение оружия')),
                ('convenience', models.IntegerField(default=0, verbose_name='Удобность оружия')),
                ('pace_of_fire', models.IntegerField(default=0, verbose_name='Скорострельность оружия')),
                ('capacity', models.IntegerField(default=0, verbose_name='Ёмкость магазина')),
            ],
            options={
                'verbose_name': 'Улучшение оружия',
                'verbose_name_plural': 'Улучшения оружия',
            },
            bases=('equipment.item',),
        ),
        migrations.CreateModel(
            name='EquipItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Имя предмета')),
                ('object_id', models.PositiveIntegerField(verbose_name='ID предмета')),
                ('quantity', models.PositiveSmallIntegerField(default=1, verbose_name='Колличество предметов')),
                ('condition', models.PositiveSmallIntegerField(default=100, verbose_name='Состояние предмета')),
                ('cost', models.PositiveIntegerField(default=0, verbose_name='Стоимость предмета')),
                ('content_type', models.ForeignKey(
                    limit_choices_to=models.Q(models.Q(('app_label', 'equipment'), ('model', 'ammo')),
                                              models.Q(('app_label', 'equipment'), ('model', 'addon')),
                                              models.Q(('app_label', 'equipment'), ('model', 'weapon')),
                                              models.Q(('app_label', 'equipment'), ('model', 'outfit')),
                                              models.Q(('app_label', 'equipment'), ('model', 'helmet')),
                                              models.Q(('app_label', 'equipment'), ('model', 'backpack')),
                                              models.Q(('app_label', 'equipment'), ('model', 'device')),
                                              models.Q(('app_label', 'equipment'), ('model', 'foodandmedical')),
                                              models.Q(('app_label', 'equipment'), ('model', 'misc')),
                                              models.Q(('app_label', 'equipment'), ('model', 'artifact')),
                                              models.Q(('app_label', 'equipment'), ('model', 'questitem')),
                                              _connector='OR'), on_delete=django.db.models.deletion.DO_NOTHING,
                    to='contenttypes.ContentType', verbose_name='Тип предмета')),
            ],
        ),
        migrations.AddField(
            model_name='equip',
            name='armor',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='armor', to='equipment.EquipItem', verbose_name='Броня'),
        ),
        migrations.AddField(
            model_name='equip',
            name='backpack',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='backpack', to='equipment.EquipItem', verbose_name='Устройство №1'),
        ),
        migrations.AddField(
            model_name='equip',
            name='belt1',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='ammo1', to='equipment.EquipItem', verbose_name='Боеприпасы №1'),
        ),
        migrations.AddField(
            model_name='equip',
            name='belt2',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='ammo2', to='equipment.EquipItem', verbose_name='Боеприпасы №2'),
        ),
        migrations.AddField(
            model_name='equip',
            name='belt3',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='ammo3', to='equipment.EquipItem', verbose_name='Боеприпасы №3'),
        ),
        migrations.AddField(
            model_name='equip',
            name='belt4',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='ammo4', to='equipment.EquipItem', verbose_name='Боеприпасы №4'),
        ),
        migrations.AddField(
            model_name='equip',
            name='belt5',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='device4', to='equipment.EquipItem',
                                    verbose_name='Пояс::Устройство №4'),
        ),
        migrations.AddField(
            model_name='equip',
            name='belt6',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='device5', to='equipment.EquipItem',
                                    verbose_name='Пояс::Устройство №5'),
        ),
        migrations.AddField(
            model_name='equip',
            name='container1',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='art1', to='equipment.EquipItem', verbose_name='Артефакт №1'),
        ),
        migrations.AddField(
            model_name='equip',
            name='container2',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='art2', to='equipment.EquipItem', verbose_name='Артефакт №2'),
        ),
        migrations.AddField(
            model_name='equip',
            name='container3',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='art3', to='equipment.EquipItem', verbose_name='Артефакт №3'),
        ),
        migrations.AddField(
            model_name='equip',
            name='container4',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='art4', to='equipment.EquipItem', verbose_name='Артефакт №4'),
        ),
        migrations.AddField(
            model_name='equip',
            name='container5',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='art5', to='equipment.EquipItem', verbose_name='Артефакт №5'),
        ),
        migrations.AddField(
            model_name='equip',
            name='container6',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='art6', to='equipment.EquipItem', verbose_name='Артефакт №6'),
        ),
        migrations.AddField(
            model_name='equip',
            name='device1',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='device1', to='equipment.EquipItem', verbose_name='Устройство №1'),
        ),
        migrations.AddField(
            model_name='equip',
            name='device2',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='device2', to='equipment.EquipItem', verbose_name='Устройство №2'),
        ),
        migrations.AddField(
            model_name='equip',
            name='device3',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='device3', to='equipment.EquipItem', verbose_name='Устройство №3'),
        ),
        migrations.AddField(
            model_name='equip',
            name='helmet',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='helmet', to='equipment.EquipItem', verbose_name='Шлем'),
        ),
        migrations.AddField(
            model_name='equip',
            name='slot1',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='weapons1', to='equipment.EquipItem', verbose_name='Первый слот'),
        ),
        migrations.AddField(
            model_name='equip',
            name='slot2',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='weapons2', to='equipment.EquipItem', verbose_name='Второй слот'),
        ),
        migrations.AddField(
            model_name='equip',
            name='slot3',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='weapons3', to='equipment.EquipItem', verbose_name='Третий слот'),
        ),
        migrations.CreateModel(
            name='Weapon',
            fields=[
                ('item_ptr',
                 models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                      primary_key=True, serialize=False, to='equipment.Item')),
                ('sort', models.CharField(
                    choices=[('none', '/* NONE /*'), ('melee', 'Ножи/Топоры'), ('pistols', 'Пистолет'),
                             ('smg', 'Пистолеты-пулеметы'), ('shotguns', 'Дробовики'),
                             ('auto_rifles', 'Автоматические винтовки'), ('sniper_rifles', 'Снайперские винтовки'),
                             ('explosive', 'Гранатометы'), ('gauss', 'Винтовка Гаусса')], max_length=100,
                    verbose_name='Тип оружия')),
                ('accuracy', models.IntegerField(default=0, verbose_name='Точность оружия')),
                ('damage', models.IntegerField(default=0, verbose_name='Повреждение оружия')),
                ('convenience', models.IntegerField(default=0, verbose_name='Удобность оружия')),
                ('pace_of_fire', models.IntegerField(default=0, verbose_name='Скорострельность оружия')),
                ('capacity', models.IntegerField(default=0, verbose_name='Ёмкость магазина')),
                ('one_handed', models.BooleanField(default=False, help_text='Например нож, пистолет',
                                                   verbose_name='Является оружие одноручным')),
                ('addon1open', models.BooleanField(default=True, help_text='Отрыт ли слот изначально',
                                                   verbose_name='1 слот аддонов: Доступность')),
                ('addon2open', models.BooleanField(default=True, help_text='Отрыт ли слот изначально',
                                                   verbose_name='2 слот аддонов: Доступность')),
                ('addon3open', models.BooleanField(default=True, help_text='Отрыт ли слот изначально',
                                                   verbose_name='3 слот аддонов: Доступность')),
                ('unique', models.BooleanField(default=False, verbose_name='Уникальное оружие')),
                ('addon1',
                 models.ManyToManyField(help_text='Возможные аддоны для первого слота аддонов', related_name='addon1',
                                        to='equipment.Addon', verbose_name='1 слот аддонов: Варианты')),
                ('addon2',
                 models.ManyToManyField(help_text='Возможные аддоны для первого слота аддонов', related_name='addon2',
                                        to='equipment.Addon', verbose_name='2 слот аддонов: Варианты')),
                ('addon3',
                 models.ManyToManyField(help_text='Возможные аддоны для первого слота аддонов', related_name='addon3',
                                        to='equipment.Addon', verbose_name='3 слот аддонов: Варианты')),
            ],
            options={
                'verbose_name': 'Оружие',
                'verbose_name_plural': 'Оружие',
            },
            bases=('equipment.item', models.Model),
        ),
    ]
